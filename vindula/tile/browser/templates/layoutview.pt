<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      metal:use-macro="context/main_template/macros/master"
      lang="en"
      i18n:domain="vindula.tile">

  <head>
  </head>
  <body>
    <metal:main fill-slot="content-core">

      <metal:macro define-macro="page"
                   tal:define="view nocall:context/@@layout-view;
                               size_global size_global|python:False;
                               tiles python:view.getItensTiles(size_global);
                               scripts view/getScripts_js;
                               stylesheets view/getStyleSheets_css;
                               columns_accessory columns_accessory|python:False;
                               size_large python: columns_accessory and '12' or '6'">
        
        <tal:rep_js repeat="name_script scripts">
            <tal:cond condition="python: not request.get(name_script)">
                <script type="text/javascript" 
                        tal:attributes="src string:${context/portal_url|nothing}/++resource++vindula.tile/js/${name_script}"></script>
                <tal:dummy tal:define="use_js_list python:request.set(name_script, 1);" />
            </tal:cond>
        </tal:rep_js>
        
        <tal:rep_css repeat="name_style stylesheets">
            <tal:cond condition="python: not request.get(name_style)">
                <link rel="stylesheet" type="text/css" id="new-theme"
                      tal:attributes="href string:${context/portal_url|nothing}/++resource++vindula.tile/css/${name_style}" />
                <tal:dummy tal:define="use_css_list python:request.set(name_style, 1);" />
            </tal:cond>
        </tal:rep_css>

        <div tal:repeat="itens tiles" class="row">
            <tal:cond_12 condition="python: len(itens) == 1 ">
                <div class="columns large-12 medium-12" tal:define="item python: itens[0]">
                    <div id="macro-tile" tal:attributes="class python:item.getIs_accessory() and 'is_accessory' or ''"
                                         tal:define="path_macro python:view.getMacro(item);
                                                     context nocall:item">

                        <tal:cod tal:condition="path_macro"
                                 tal:on-error="string: Erro ao carregar o bloco ${context/Title}">

                          <metal:block metal:use-macro="python:path(path_macro)"/>

                        </tal:cod>

                    </div>
                </div>
            </tal:cond_12>

            <tal:cond_6 condition="python: len(itens) == 2 ">
                <div class="columns large-6" id="even"
                    tal:attributes="class string: columns medium-${size_large} large-${size_large}">
                    <tal:rep_even tal:repeat="item python: itens[0]">
                        <div id="macro-tile" tal:attributes="class python:item.getIs_accessory() and 'is_accessory' or ''"
                                             tal:define="path_macro python:view.getMacro(item);
                                                         context nocall:item">

                          <tal:cod tal:condition="path_macro"
                                   tal:on-error="string: Erro ao carregar o bloco ${context/Title}">

                            <metal:block metal:use-macro="python:path(path_macro)"/>

                          </tal:cod>

                        </div>
                    </tal:rep_even>
                </div>
                <div class="columns large-6" id="odd"
                     tal:attributes="class string: columns medium-${size_large} large-${size_large}">
                    <tal:rep_odd tal:repeat="item python: itens[1]">
                        <div id="macro-tile" tal:attributes="class python:item.getIs_accessory() and 'is_accessory' or ''"
                                             tal:define="path_macro python:view.getMacro(item);
                                                         context nocall:item">

                            <tal:cod tal:condition="path_macro"
                                     tal:on-error="string: Erro ao carregar o bloco ${context/Title}">

                              <metal:block metal:use-macro="python:path(path_macro)"/>

                            </tal:cod>

                        </div>
                    </tal:rep_odd>
                </div>
            </tal:cond_6>
        </div>
      </metal:macro>
    </metal:main>
  </body>
</html>